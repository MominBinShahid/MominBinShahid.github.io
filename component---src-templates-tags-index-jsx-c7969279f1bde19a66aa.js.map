{"version":3,"sources":["webpack:///./src/templates/tags/index.jsx","webpack:///./src/templates/tags/tags.module.less"],"names":["TagPage","data","tag","pageContext","tagName","Config","tags","name","Utils","capitalize","tagPagePath","pages","path","tagImage","allFile","edges","find","edge","node","childImageSharp","fluid","posts","allMarkdownRemark","filter","frontmatter","published","className","title","description","resolvePageUrl","keywords","style","tagsList","bannerImgContainer","bannerImg","alt","gutter","map","post","key","xs","sm","md","lg","module","exports"],"mappings":"wUAiIeA,UA/GC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACTC,EADiC,EAAlBC,YACfD,IACFE,EAAUC,IAAOC,KAAKJ,GAAKK,MAAQC,IAAMC,WAAWP,GACpDQ,EAAcL,IAAOM,MAAMT,IAAIU,KAC/BC,EAAWZ,EAAKa,QAAQC,MAC3BC,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAKX,OAASL,KAAKgB,KAAKC,gBAAgBC,MACzDC,EAAQpB,EAAKqB,kBAAkBP,MAAMQ,QAAO,qBAAGL,KAAgBM,YAAYC,aAEjF,OACE,uBAAQC,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,MAAOvB,EACPwB,YAAW,kBAAoBxB,EAApB,KAAgCC,IAAOC,KAAKJ,GAAK0B,YAAjD,IACXhB,KAAMJ,IAAMqB,eAAenB,EAAaR,GACxC4B,SAAU,CAAC1B,KAEb,kBAAC,IAAD,KACE,yBAAKsB,UAAS,kBAAoBK,IAAMC,UACtC,gCAEG5B,GAEH,yBAAKsB,UAAWK,IAAME,oBACpB,kBAAC,IAAD,CAAKP,UAAWK,IAAMG,UAAWd,MAAOP,EAAUsB,IAAK/B,KAEzD,wBAAIsB,UAAU,cACXrB,IAAOC,KAAKJ,GAAK0B,cAGtB,uBAAKQ,OAAQ,CAAC,GAAI,KACff,EAAMgB,KAAI,SAACC,GAAD,OACT,uBAAKC,IAAKD,EAAKpB,KAAKM,YAAYZ,KAAM4B,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAChE,kBAAC,IAAD,CAAU1C,KAAMqC,c,qBCnDhCM,EAAOC,QAAU,CAAC,SAAW,+BAA+B,mBAAqB,yCAAyC,UAAY","file":"component---src-templates-tags-index-jsx-c7969279f1bde19a66aa.js","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* Vendor imports */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport {\n  Layout, Row, Col,\n} from 'antd';\n/* App imports */\nimport SEO from '../../components/Seo';\nimport Header from '../../components/PageLayout/Header';\nimport PostCard from '../../components/PostCard';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const tagName = Config.tags[tag].name || Utils.capitalize(tag);\n  const tagPagePath = Config.pages.tag.path;\n  const tagImage = data.allFile.edges\n    .find((edge) => edge.node.name === tag).node.childImageSharp.fluid;\n  const posts = data.allMarkdownRemark.edges.filter(({ node }) => node.frontmatter.published);\n\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`All post about ${tagName}. ${Config.tags[tag].description} `}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1>\n              #\n              {tagName}\n            </h1>\n            <div className={style.bannerImgContainer}>\n              <Img className={style.bannerImg} fluid={tagImage} alt={tagName} />\n            </div>\n            <h4 className=\"textCenter\">\n              {Config.tags[tag].description}\n            </h4>\n          </div>\n          <Row gutter={[20, 20]}>\n            {posts.map((post) => (\n              <Col key={post.node.frontmatter.path} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} />\n              </Col>\n            ))}\n          </Row>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            published\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagsList\":\"tags-module--tagsList--39vLn\",\"bannerImgContainer\":\"tags-module--bannerImgContainer--24LjU\",\"bannerImg\":\"tags-module--bannerImg--xzH6c\"};"],"sourceRoot":""}